## BookingConfirmationEmailer.apex
public class BookingConfirmationEmailer {
    @future(callout=false)
    public static void sendBookingConfirmation(Set<Id> bookingIds) {
        List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
        List<Booking__c> bookings = [SELECT Id, Name, Customer_Email__c,  Total_Billing_Amount__c
                                     FROM Booking__c
                                     WHERE Id IN :bookingIds];
        for (Booking__c booking : bookings) {
            if (String.isNotBlank(booking.Customer_Email__c)) {
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                mail.setToAddresses(new String[] { booking.Customer_Email__c });
                mail.setSubject('Booking Confirmed: ' + booking.Name);
                mail.setPlainTextBody(
                    'Dear Customer,' + '\n\n' +
                    'Your booking has been confirmed. Please find the details below:\n' +
                    'Booking ID: ' + booking.Name + '\n' +
                    'Total Bill Amount Paid: $' + booking.Total_Billing_Amount__c + '\n\n' +
                    'Thank you for booking with us!'
                );
                emails.add(mail);
            }
        }
        if (!emails.isEmpty()) {
            Messaging.sendEmail(emails);
        }
    }
}

## BookingReminderQueueable.apex
public class BookingReminderQueueable implements Queueable {
    List<Booking__c> bookingsToRemind;
    public BookingReminderQueueable(List<Booking__c> bookings) {
        this.bookingsToRemind = bookings;
    }
    public void execute(QueueableContext context) {
        List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
        for (Booking__c booking : bookingsToRemind) {
            if (String.isNotBlank(booking.Customer_Email__c)) {
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                mail.setToAddresses(new String[] { booking.Customer_Email__c });
                mail.setSubject('Reminder: Your Tour Starts Soon!');
                mail.setPlainTextBody(
                    'Hello,\n\nThis is a friendly reminder that your tour is starting on ' +
                    booking.Travelling_Start_Date__c.format() + 
                    '. Please make necessary arrangements.\n\nThank you for choosing us!'
                );
                emails.add(mail);
            }
        }
        if (!emails.isEmpty()) {
            Messaging.sendEmail(emails);
        }
    }
}

## BookingTriggerHandler.apex
public class BookingTriggerHandler {

    // Booking Payment Record Creation
    public static void createPaymentRecords(List<Booking__c> newBookings) {
        List<Payment__c> paymentsToInsert = new List<Payment__c>();
        for (Booking__c booking : newBookings) {
            Payment__c payment = new Payment__c();
            payment.Booking__c = booking.Id;
            payment.Payment_Status__c = 'Pending'; // Default status
            payment.Payment_Date__c = Date.today(); // Required field
            paymentsToInsert.add(payment);
        }

        if (!paymentsToInsert.isEmpty()) {
            insert paymentsToInsert;
        }
    }

    // Booking Guests Record Creation
    public static void createBookingGuests(List<Booking__c> bookings) {
        Set<Id> bookingIds = new Set<Id>();
        Set<Id> customerIds = new Set<Id>();

        for (Booking__c booking : bookings) {
            if (booking.Customer__c != null) {
                bookingIds.add(booking.Id);
                customerIds.add(booking.Customer__c);
            }
        }

        // Query existing Booking_Guest__c to prevent duplication
        Map<Id, List<Booking_Guest__c>> existingGuestsMap = new Map<Id, List<Booking_Guest__c>>();
        for (Booking_Guest__c guest : [
            SELECT Id, Booking__c FROM Booking_Guest__c WHERE Booking__c IN :bookingIds
        ]) {
            if (!existingGuestsMap.containsKey(guest.Booking__c)) {
                existingGuestsMap.put(guest.Booking__c, new List<Booking_Guest__c>());
            }
            existingGuestsMap.get(guest.Booking__c).add(guest);
        }

        // Query related Customer_Info__c
        Map<Id, Customer_Info__c> customerMap = new Map<Id, Customer_Info__c>(
            [SELECT Id, Name, Age__c, Country__c FROM Customer_Info__c WHERE Id IN :customerIds]
        );

        List<Booking_Guest__c> guestsToInsert = new List<Booking_Guest__c>();
        for (Booking__c booking : bookings) {
            if (existingGuestsMap.containsKey(booking.Id)) {
                continue; // Guests already exist, skip this booking
            }

            Integer count = (Integer)booking.Number_of_Travelers__c;
            Customer_Info__c customer = customerMap.get(booking.Customer__c);

            for (Integer i = 1; i <= count; i++) {
                Booking_Guest__c guest = new Booking_Guest__c();
                guest.Booking__c = booking.Id;

                if (customer != null) {
                    guest.Name = customer.Name;
                    guest.Age__c = customer.Age__c;
                    guest.Country__c = customer.Country__c;
                }

                guestsToInsert.add(guest);
            }
        }

        if (!guestsToInsert.isEmpty()) {
            insert guestsToInsert;
        }
    }
}
## BookingTriggerTest.apex

@isTest
private class BookingTriggerTest {
    @isTest
    static void testTriggerCreatesPaymentAndGuestsWithUpdatedFields() {
        // Create test customer with required fields
        Customer_Info__c customer = new Customer_Info__c(
            Name = 'John Doe',
            Email__c = 'annapurna@gmail.com',
            Phone__c = '1234567890',
            Date_Of_Birth__c = Date.newInstance(1995, 5, 20),
            Country__c = 'Philippines' // Required picklist or text field
        );
        insert customer;

        // Create a Travel Package
        Travel_Package__c packageRec = new Travel_Package__c(
            Name = 'European Delight',
            Country__c = 'India',
            Price_Per_Person__c = 2000,
            Duration_in_Days__c = 3,
            Places_Covered__c = 'Delhi, Agra, Jaipur'
        );
        insert packageRec;

        // Create Booking
        Booking__c booking = new Booking__c(
            Number_of_Travelers__c = 3,
            Booking_Status__c = 'Pending',
            Travelling_Start_Date__c = Date.today().addDays(10),
            Travel_Package__c = packageRec.Id,
            Membership_Chosen_Req__c = 'Gold',
            Preferred_Accommodation__c = 'Guest House',
            Customer__c = customer.Id,
            Customer_Email__c = 'annapurna@gmail.com',
            Booking_Date__c = Date.today()
        );

        Test.startTest();
        insert booking;
        Test.stopTest();

        // Assert Payment record
        List<Payment__c> payments = [
            SELECT Id, Booking__c, Payment_Status__c 
            FROM Payment__c 
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(1, payments.size());
        System.assertEquals('Pending', payments[0].Payment_Status__c);

        // Assert Booking Guests
        List<Booking_Guest__c> guests = [
            SELECT Id, Booking__c, Name, Country__c 
            FROM Booking_Guest__c 
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(3, guests.size());
        System.assertEquals('John Doe', guests[0].Name);
        System.assertEquals('Philippines', guests[0].Country__c);
    }
}

## PaymentReminderBatch.apex

global class PaymentReminderBatch implements Database.Batchable<SObject> {
    global Database.QueryLocator start(Database.BatchableContext bc) {
        Date targetDate = System.today().addDays(-1); // Bookings made yesterday
        String query = 'SELECT Id, Name, Customer_Email__c, Booking_Date__c ' +
                       'FROM Booking__c ' +
                       'WHERE Booking_Status__c = \'Pending\' AND Booking_Date__c = :targetDate';
        return Database.getQueryLocator(query);
    }

    global void execute(Database.BatchableContext bc, List<Booking__c> scope) {
        List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
        for (Booking__c booking : scope) {
            if (String.isNotBlank(booking.Customer_Email__c)) {
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                mail.setToAddresses(new String[] { booking.Customer_Email__c });
                mail.setSubject('Payment Reminder for Your Booking');
                mail.setPlainTextBody('Hi,\n\nThis is a gentle reminder to complete your payment for booking: ' + booking.Name +
                                      '.\n\nPlease make the payment to confirm your trip.\n\nThanks,\nTours & Travels CRM');
                emails.add(mail);
            }
        }
        if (!emails.isEmpty()) {
            Messaging.sendEmail(emails);
        }
    }

    global void finish(Database.BatchableContext bc) {
        Messaging.SingleEmailMessage adminMail = new Messaging.SingleEmailMessage();
        adminMail.setToAddresses(new String[] { 'annapurna@thesmartbridge.com' });
        adminMail.setSubject('Daily Payment Reminder Batch Completed');
        adminMail.setPlainTextBody('Payment reminders for pending bookings have been processed.');
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { adminMail });
    }
}

## SchedulePaymentReminderBatch.apex

public class SchedulePaymentReminderBatch implements Schedulable {
    public void execute(SchedulableContext sc) {
        PaymentReminderBatch batch = new PaymentReminderBatch();
        Database.executeBatch(batch, 200);
    }
}

TravelPackageController.apex

public with sharing class TravelPackageController {

    @AuraEnabled(cacheable=true)
    public static List<Travel_Package__c> getPackagesByCountry(String country) {        
        return [
            SELECT 
                Id, 
                Name, 
                Package_Type__c, 
                Duration_in_Days__c,            
                Guide_Included__c, 
                Membership__c, 
                Region__c,
                Transportation_Modes__c,
                Availability_Status__c,
                Average_Rating__c,
                Places_Covered__c 
            FROM Travel_Package__c 
            WHERE Country__c = :country
        ];   
    }

}


